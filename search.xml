<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[深度学习识别验证码]]></title>
      <url>/2018/01/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>最近研究了一个毛！<br><a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> 深度学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue2.0 学习笔记]]></title>
      <url>/2018/01/07/%E5%89%8D%E7%AB%AF/Vue/Vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="Vue-js2-0-笔记"><a href="#Vue-js2-0-笔记" class="headerlink" title="Vue.js2.0 笔记"></a>Vue.js2.0 笔记</h2><h3 id="内部指令"><a href="#内部指令" class="headerlink" title="内部指令"></a>内部指令</h3><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"greeting"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var exampleVM = new Vue(&#123;</span></div><div class="line"><span class="undefined">        el: "#example",</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            greeting: false</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"greeting"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var exampleVM = new Vue(&#123;</span></div><div class="line"><span class="undefined">        el: "#example",</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            greeting: true</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="v-if和v-show的比较"><a href="#v-if和v-show的比较" class="headerlink" title="v-if和v-show的比较"></a>v-if和v-show的比较</h4><p>&emsp;&emsp;在切换v-if时候，Vue.js有一个局部编译和卸载过程，因为v-if中模板可能包括数据绑定或子组件，v-id是惰性的，如果初始渲染条件为假，什么也做不做，在条件第一次变为真时，才开始进行局部编译（编译会被缓存起来）。<br><br>&emsp;&emsp;相比之下，v-show元素始终被编译并保留，只是简单地基于CSS切换。<br><br>&emsp;&emsp;一般来说，v-if具有更高的切换消耗，而v-show有更高的初始渲染消耗。<strong>因此需要频繁的切换，使用v-show比较好。如果运行时条件不大可能变化，使用v-if较好。</strong><br></p>
<h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"greeting"</span>&gt;</span>greeting is ok<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>=<span class="string">"greeting"</span>&gt;</span>greeting is not ok<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var exampleVM = new Vue(&#123;</span></div><div class="line"><span class="undefined">        el: "#example",</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            greeting: false</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>&emsp;&emsp;v-model指令用来在input、select、text、checkbox、radio等表单控件元素上创建双向数据绑定。根据控件类型v-model自动选择正确的方法更新元素。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    姓名：</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"data.name"</span> <span class="attr">placeholder</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    性别：</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">value</span>=<span class="string">"One"</span> <span class="attr">v-model</span>=<span class="string">"data.sex"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"man"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"woman"</span> <span class="attr">value</span>=<span class="string">"Two"</span> <span class="attr">v-model</span>=<span class="string">"data.sex"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"woman"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    兴趣：</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">value</span>=<span class="string">"book"</span> <span class="attr">v-model</span>=<span class="string">"data.interest"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"book"</span>&gt;</span>阅读<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"swim"</span> <span class="attr">value</span>=<span class="string">"swim"</span> <span class="attr">v-model</span>=<span class="string">"data.interest"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"swim"</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"game"</span> <span class="attr">value</span>=<span class="string">"game"</span> <span class="attr">v-model</span>=<span class="string">"data.interest"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"game"</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"song"</span> <span class="attr">value</span>=<span class="string">"song"</span> <span class="attr">v-model</span>=<span class="string">"data.interest"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"song"</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    身份：</div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"data.identity"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"teacher"</span> <span class="attr">selected</span>&gt;</span>教师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"doctor"</span>&gt;</span>医生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"lawyer"</span>&gt;</span>律师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var exampleVM = new Vue(&#123;</span></div><div class="line"><span class="undefined">        el: 'example',</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            name: '',</span></div><div class="line"><span class="undefined">            sex: '',</span></div><div class="line"><span class="undefined">            interest: [],</span></div><div class="line"><span class="undefined">            identity: ''</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注1：v-model在input事件中同步输入框的值和数据，如果要伴随时间改变而不是同步改变的话，可以参考如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">    &#123;&#123;name&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var a = new Vue(&#123;</span></div><div class="line"><span class="undefined">        el: "#example",</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            name: "输入框外点击鼠标显示输入内容"</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注2：v-moel可以对输入框的内容进行trim操作，具体如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">    &#123;&#123;name&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var a = new Vue(&#123;</span></div><div class="line"><span class="undefined">        el: "#example",</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            name: "  前后都有空格  "</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>当使用v-for时，v-model不再生效。<code>&lt;input v-for=&quot;str in strings&quot; v-model=&quot;str&quot;&gt;</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span>&gt;</span></div><div class="line">        序号：&#123;&#123;index&#125;&#125;  工号：&#123;&#123;item.id&#125;&#125; 姓名：&#123;&#123;item.msg&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var a = new Vue(&#123;</span></div><div class="line"><span class="undefined">        el: "#example",</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            items: [</span></div><div class="line"><span class="undefined">                &#123;</span></div><div class="line"><span class="undefined">                    id: '001',</span></div><div class="line"><span class="undefined">                    msg: "张三"</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined">                &#123;</span></div><div class="line"><span class="undefined">                    id:'002',</span></div><div class="line"><span class="undefined">                    msg: "李四"</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined">            ]</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span> <span class="attr">v-html</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    &#123;&#123;html&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    var a = new Vue(&#123;</span></div><div class="line"><span class="undefined">        el: "#example",</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="xml">            html:"<span class="tag">&lt;<span class="name">li</span>&gt;</span>这是一个innerHtml<span class="tag">&lt;/<span class="name">li</span>&gt;</span>"</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注：不建议在网站上直接动态渲染任意HTML片段，这样很容易导致XSS攻击。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> VueJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker镜像的基本操作]]></title>
      <url>/2017/12/03/Docker/Docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker pull [server]/imagename[:tag]</div></pre></td></tr></table></figure>
<p>如果不指定tag，会默认使用<code>latest</code>标签,默认服务器是<code>registry.hub.docker.com</code>,也可以使用其他注册服务器进行pull，例如DockerPool社区的镜像源<code>dl.dockerpool.com</code>下载最新的镜像。例如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker pull dl.dockerpool.com/ubuntu:14.04</div></pre></td></tr></table></figure></p>
<h3 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo docker images</div><div class="line">&gt;&gt;</div><div class="line">REPOSITORY       TAG       IMAGE_ID        CREATED          SIZE</div><div class="line">ubuntu           14.04     20c44cd7596f    2 weeks ago      123 MB</div></pre></td></tr></table></figure>
<h3 id="为镜像打TAG"><a href="#为镜像打TAG" class="headerlink" title="为镜像打TAG"></a>为镜像打TAG</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker tag ubuntu:14.04 ubuntu:mytag</div></pre></td></tr></table></figure>
<p>tag标签是指向了同一个镜像，只是镜像的别名而已，标签起到了引用和快捷方式的作用。通过<code>sudo docker images</code>查看镜像：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">REPOSITORY       TAG       IMAGE_ID        CREATED          SIZE</div><div class="line">ubuntu           14.04     20c44cd7596f    2 weeks ago      123 MB</div><div class="line">ubuntu           mytag     20c44cd7596f    2 weeks ago      123 MB</div></pre></td></tr></table></figure></p>
<p>可以通过<code>sudo docker inspect REPOSITORY:TagName</code>或者<code>sudo docker inspect REPOSITORY:Image_ID</code>查看镜像的详细信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"sha256:20c44cd7596ff4807aef84273c99588d22749e2a7e15a7545ac96347baa65eda"</span>,</div><div class="line">        <span class="string">"RepoTags"</span>: [</div><div class="line">            <span class="string">"ubuntu:14.04"</span>,</div><div class="line">            <span class="string">"ubuntu:latest"</span>,</div><div class="line">            <span class="string">"ubuntu:mytag"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"RepoDigests"</span>: [</div><div class="line">            <span class="string">"ubuntu@sha256:7c67a2206d3c04703e5c23518707bdd4916c057562dd51c74b99b2ba26af0f79"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"Parent"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Comment"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Created"</span>: <span class="string">"2017-11-17T21:59:25.014645802Z"</span>,</div><div class="line">        <span class="string">"Container"</span>: <span class="string">"e5f1a9df75b86a5d803eaf6f3fed6a0f8ef5fbf15a6c5039df087e4348ed8171"</span>,</div><div class="line">        <span class="string">"ContainerConfig"</span>: &#123;</div><div class="line">            <span class="string">"Hostname"</span>: <span class="string">"e5f1a9df75b8"</span>,</div><div class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"Tty"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"Env"</span>: [</div><div class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"Cmd"</span>: [</div><div class="line">                <span class="string">"/bin/sh"</span>,</div><div class="line">                <span class="string">"-c"</span>,</div><div class="line">                <span class="string">"#(nop) "</span>,</div><div class="line">                <span class="string">"CMD [\"/bin/bash\"]"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"ArgsEscaped"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">"Image"</span>: <span class="string">"sha256:b5771e7d8dcc594b886dbdd6a9c3de60d45252ca657dfdff6e1d996728dfa2cd"</span>,</div><div class="line">            <span class="string">"Volumes"</span>: null,</div><div class="line">            <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"Entrypoint"</span>: null,</div><div class="line">            <span class="string">"OnBuild"</span>: null,</div><div class="line">            <span class="string">"Labels"</span>: &#123;&#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"DockerVersion"</span>: <span class="string">"17.06.2-ce"</span>,</div><div class="line">        <span class="string">"Author"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"Config"</span>: &#123;</div><div class="line">            <span class="string">"Hostname"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"Tty"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"Env"</span>: [</div><div class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"Cmd"</span>: [</div><div class="line">                <span class="string">"/bin/bash"</span></div><div class="line">            ],</div><div class="line">            <span class="string">"ArgsEscaped"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">"Image"</span>: <span class="string">"sha256:b5771e7d8dcc594b886dbdd6a9c3de60d45252ca657dfdff6e1d996728dfa2cd"</span>,</div><div class="line">            <span class="string">"Volumes"</span>: null,</div><div class="line">            <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"Entrypoint"</span>: null,</div><div class="line">            <span class="string">"OnBuild"</span>: null,</div><div class="line">            <span class="string">"Labels"</span>: null</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"Architecture"</span>: <span class="string">"amd64"</span>,</div><div class="line">        <span class="string">"Os"</span>: <span class="string">"linux"</span>,</div><div class="line">        <span class="string">"Size"</span>: 122792927,</div><div class="line">        <span class="string">"VirtualSize"</span>: 122792927,</div><div class="line">        <span class="string">"GraphDriver"</span>: &#123;</div><div class="line">            <span class="string">"Name"</span>: <span class="string">"aufs"</span>,</div><div class="line">            <span class="string">"Data"</span>: null</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"RootFS"</span>: &#123;</div><div class="line">            <span class="string">"Type"</span>: <span class="string">"layers"</span>,</div><div class="line">            <span class="string">"Layers"</span>: [</div><div class="line">                <span class="string">"sha256:788ce2310e2fdbbf81fe21cbcc8a44da4cf648b0339b09c221abacb</span></div><div class="line"><span class="string">                4cd5fd136"</span>,</div><div class="line">                <span class="string">"sha256:aa4e47c4511638484cd5d95eadd7a8e4da307375ba31ff50d47aa9065dce01e0"</span>,</div><div class="line">                <span class="string">"sha256:b3968bc26fbd527f214f895aeef940a6930c62d853fe8b12bd479f0b53518150"</span>,</div><div class="line">                <span class="string">"sha256:c9748fbf541d3e043521e165b015d45825de33c00a8acb037443cfbd0cb5e677"</span>,</div><div class="line">                <span class="string">"sha256:2f5b0990636a87f1557d64ba39808dcd64031328b2a159c5805115b8e725bbbc"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>上面返回的JSON信息太多，如果只需要其中部分内容，可以使用<code>-f</code>参数来指定，例如获取Architecture信息：<br><br><code>sudo docker inspect -f .Architecture ubuntu:14.04</code><br><br>返回内容：<br><br><code>amd64</code><br></p>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker rmi REPOSITORY:TagName</div></pre></td></tr></table></figure>
<p>当镜像只剩下一个标签时候，使用此命令会彻底删除该镜像。</p>
<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>创建镜像有三种方式：基于已有镜像的容器创建、基于本地模板导入、基于Dockerfile创建。</p>
]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过函数指针进行初始化]]></title>
      <url>/2017/09/07/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%BC%96%E7%A8%8B/%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span>  <span class="params">(*Init_board)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_function</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="keyword">const</span> Init_board Init_Sequnce[] = </div><div class="line">&#123;</div><div class="line">  Init_function,</div><div class="line">  <span class="literal">NULL</span>,</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Funs_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">const</span> Init_board *call = Init_Sequnce;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(; *call; ++call)</div><div class="line">    (*call)();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 嵌入式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 函数指针 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[梯度下降(吴恩达公开课笔记)]]></title>
      <url>/2017/09/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D-%E5%90%B4%E6%81%A9%E8%BE%BE%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="1、梯度下降思想"><a href="#1、梯度下降思想" class="headerlink" title="1、梯度下降思想"></a>1、梯度下降思想</h1><p>&emsp;&emsp;梯度下降背后的思想是：开始随机选取一个参数的组合$({\theta}_{0},{\theta}_{1},…,{\theta}_{n})$，计算代价函数，然后虚招下一个能让代价函数下降最多的参数组合。一直迭代下去直到找到一个局部最小值停止。因为并没有遍历所有的参数组合，所以不能确定局部最小值就是去全局最小值，如果代价函数具有多个极值点，那么选择不同的初始参数组合，可能会找到不同的局部最小值。<br><a id="more"></a></p>
<h1 id="2、参数更新"><a href="#2、参数更新" class="headerlink" title="2、参数更新"></a>2、参数更新</h1><p>&emsp;&emsp;当参数只有两个的时候（一个特征）,代价函数为$J({\theta}_{0},{\theta}_{1})$。<br>&emsp;&emsp;repeat until convergence: $${ {\theta}_{j} := {\theta}_{j} - \alpha\frac{<br>\partial}{\partial{\theta}_{j} }J({\theta}_{0},{\theta}_{1}) } \quad for(j=0\quad and\quad  j=1)$$<br>&emsp;&emsp;$temp0:={\theta}_{0}-\alpha\frac{<br>\partial}{\partial{\theta}_{0} }J({\theta}_{0},{\theta}_{1})$<br>&emsp;&emsp;$temp1:={\theta}_{1}-\alpha\frac{<br>\partial}{\partial{\theta}_{1} }J({\theta}_{0},{\theta}_{1})$<br>&emsp;&emsp;${\theta}_{0}:=temp0$<br>&emsp;&emsp;${\theta}_{1}:=temp1$<br>&emsp;&emsp;其中$alpha$是学习率，学习率决定了代价函数下降的大小。在批量梯度下降中，每一次都同时让所有的参数都减去学习速率乘以代价函数的偏导数。</p>
<h1 id="3、批量梯度下降"><a href="#3、批量梯度下降" class="headerlink" title="3、批量梯度下降"></a>3、批量梯度下降</h1><p>下面的h(x)是要拟合的函数，J(theta)损失函数，theta是参数，要迭代求解的值，theta求解出来了那最终要拟合的函数h(theta)就出来了。其中m是训练集的记录条数，j是参数的个数。<br><img src="/2017/09/03/机器学习/梯度下降-吴恩达公开课笔记/求导.jpg" alt=""><br>（1）将J(theta)对theta求偏导，得到每个theta对应的的梯度<br><img src="/2017/09/03/机器学习/梯度下降-吴恩达公开课笔记/求导.jpg" alt="enter description here"><br>（2）由于是要最小化风险函数，所以按每个参数theta的梯度负方向，来更新每个theta<br><img src="/2017/09/03/机器学习/梯度下降-吴恩达公开课笔记/求导.jpg" alt="enter description here"><br>（3）从上面公式可以注意到，它得到的是一个全局最优解，但是每迭代一步，都要用到训练集所有的数据，如果m很大，那么可想而知这种方法的迭代速度！！所以，这就引入了另外一种方法，随机梯度下降。</p>
<h1 id="4、随机梯度下降"><a href="#4、随机梯度下降" class="headerlink" title="4、随机梯度下降"></a>4、随机梯度下降</h1><p>（1）上面的风险函数可以写成如下这种形式，损失函数对应的是训练集中每个样本的粒度，而上面批量梯度下降对应的是所有的训练样本：<br><img src="/2017/09/03/机器学习/梯度下降-吴恩达公开课笔记/求导.jpg" alt="enter description here"><br>（2）每个样本的损失函数，对theta求偏导得到对应梯度，来更新theta<br><img src="/2017/09/03/机器学习/梯度下降-吴恩达公开课笔记/求导.jpg" alt="enter description here"><br>（3）随机梯度下降是通过每个样本来迭代更新一次，如果样本量很大的情况（例如几十万），那么可能只用其中几万条或者几千条的样本，就已经将theta迭代到最优解了，对比上面的批量梯度下降，迭代一次需要用到十几万训练样本，一次迭代不可能最优，如果迭代10次的话就需要遍历训练样本10次。但是，SGD伴随的一个问题是噪音较BGD要多，使得SGD并不是每次迭代都向着整体最优化方向。</p>
<h1 id="5、两种梯度下降对比"><a href="#5、两种梯度下降对比" class="headerlink" title="5、两种梯度下降对比"></a>5、两种梯度下降对比</h1><h2 id="5-1-批量梯度下降"><a href="#5-1-批量梯度下降" class="headerlink" title="5.1 批量梯度下降"></a>5.1 批量梯度下降</h2><p>&emsp;&emsp;最小化所有训练样本的损失函数，使得最终求解的是全局的最优解，即求解的参数是使得风险函数最小。</p>
<h2 id="5-2-随机梯度下降"><a href="#5-2-随机梯度下降" class="headerlink" title="5.2 随机梯度下降"></a>5.2 随机梯度下降</h2><p>&emsp;&emsp;最小化每条样本的损失函数，虽然不是每次迭代得到的损失函数都向着全局最优方向， 但是大的整体的方向是向全局最优解的，最终的结果往往是在全局最优解附近。</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 梯度下降 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[时间序列算法]]></title>
      <url>/2017/09/02/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="1、时间序列预处理"><a href="#1、时间序列预处理" class="headerlink" title="1、时间序列预处理"></a>1、时间序列预处理</h1><a id="more"></a>
<p>&emsp;&emsp;得到一个观测序列之后，要分析检验序列的随机性和平稳性。两个重要的检验称为序列的预处理。对于不同类型的序列需要采用不同的分析方法。</p>
<ol>
<li>对于纯随机序列，又称白噪声序列，序列各个观测值之间没有任何关系，序列是完全无序的随机波动，则可以不用对序列继续分析。因为白噪声序列是没有任何信息可以提取的<strong>平稳序列</strong>。</li>
<li>对于平稳非白噪声序列，它的均值和方差是常数。目前已经有一套非常成熟的平稳序列的建模方法。通常是建议一个线性模型来拟合序列的发展。<strong>ARMA</strong>是最常用的平稳序列拟合模型。</li>
<li>对于非平稳序列，由于序列本身的均值和方差不稳定，处理方法一般是==将其转为平稳序列==，然后采用平稳序列的模型进行分析。对于非平稳序列，经过差分之后具有平稳性则称差分平稳序列，对于差分平稳序列可以使用ARMA模型对其进行分析。</li>
</ol>
<h2 id="1-1-平稳性检验"><a href="#1-1-平稳性检验" class="headerlink" title="1.1 平稳性检验"></a>1.1 平稳性检验</h2><p>&emsp;&emsp;平稳性检验主要有两种方法：基于时序图和自相关图做出判断的方法，该方法简单方便，应用广泛，但是具有主观性。另一种方法是构造检验统计量进行验证，该方法最常用的方法是<strong>单位根检测</strong>。</p>
<h3 id="1-1-1-时序图检验"><a href="#1-1-1-时序图检验" class="headerlink" title="1.1.1  时序图检验"></a>1.1.1  时序图检验</h3><p>&emsp;&emsp;平稳序列的时序图表现出始终在一个常数附近波动，波动范围有界。如果时序图有明显的趋势性或者周期性通常是非平稳序列。</p>
<h3 id="1-1-2-自相关图检验"><a href="#1-1-2-自相关图检验" class="headerlink" title="1.1.2  自相关图检验"></a>1.1.2  自相关图检验</h3><p>&emsp;&emsp;平稳序列具有短周期相关性，这性质表明平稳序列通常只有近期的序列值对当前值有明显的影响，随着延迟时间加长，自相关系数会衰减到0，并在0附近随机波动。而对于非平稳序列，自相关系数会衰减缓慢。<br>通过Matlab进行仿真：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">fs=500;</div><div class="line">t=1/500:1/500:1;</div><div class="line">f=5;</div><div class="line">r=randn(1,fs)*0.2;</div><div class="line">y=sin(2*pi*t*f);</div><div class="line">ycorr=xcorr(y,y);</div><div class="line">rcorr=xcorr(r,r);</div><div class="line">subplot(211);plot(t,y);title('非平稳序列时序图')</div><div class="line">subplot(212);plot(ycorr);title('非平稳序列自相关图')</div><div class="line">figure</div><div class="line">subplot(211);plot(t,r);title('平稳序列时序图')</div><div class="line">subplot(212);plot(rcorr);title('平稳序列时序图')</div></pre></td></tr></table></figure></p>
<p><img src="/2017/09/02/数据处理/数据处理算法/时间序列算法/时间序列算法/./非平稳序列时序图与自相关图.jpg" alt="非平稳序列时序图与自相关图"></p>
<p><img src="/2017/09/02/数据处理/数据处理算法/时间序列算法/时间序列算法/./平稳序列时序图与自相关图.jpg" alt="平稳序列时序图与自相关图"></p>
<h3 id="1-1-3-单位根检测"><a href="#1-1-3-单位根检测" class="headerlink" title="1.1.3 单位根检测"></a>1.1.3 单位根检测</h3><p>&emsp;&emsp;对序列是否具有单位根进行检测，如果存在单位根，则是非平稳序列，反之，是平稳序列。单位根检测有很多种方法。此处主要介绍：<strong>DF检测(Dicky-Fuller Test)</strong>和<strong>ADF检测</strong>。</p>
<h2 id="1-2-纯随机性检测"><a href="#1-2-纯随机性检测" class="headerlink" title="1.2 纯随机性检测"></a>1.2 纯随机性检测</h2><p>&emsp;&emsp;纯随机性检验也称为白噪声检验，一般用构造的统计量来检验序列的纯随机性，常用的统计量有Q统计量和LB统计量。<br>&emsp;&emsp;序列值之间的变异是绝对的，但是相关性是偶然的，则可以做如下假设：<br> &emsp;&emsp;- 原假设：延迟期数不大于$m$期的序列值是相互独立的。<br> &emsp;&emsp;- 备用假设：延时期数不大于$m$期的序列值是相关的。<br> &emsp;&emsp;数学语言描述：<br> &emsp;&emsp;${H}_{0}$:${\rho}_{1}={\rho}_{2}=…={\rho}_{m},\forall m\geq1$<br> &emsp;&emsp;${H}_{1}$:至少存在某个${\rho}_{k}\neq0,\forall m\geq1,k\leq m$</p>
]]></content>
      
        <categories>
            
            <category> 数字信号处理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 时间序列 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习简介]]></title>
      <url>/2017/09/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="1、机器学习三要素"><a href="#1、机器学习三要素" class="headerlink" title="1、机器学习三要素"></a>1、机器学习三要素</h1><a id="more"></a>
<h2 id="1-1-任务"><a href="#1-1-任务" class="headerlink" title="1.1 任务"></a>1.1 任务</h2><p>&emsp;&emsp;机器学习的任务有很多，其中两种最经典的任务就是<strong>监督学习</strong>和<strong>无监督学习</strong>。其中监督学习主要是对事物进行预测，预测一般包括<strong>分类</strong>和<strong>回归</strong>。而无监督学习则主要是对事物本身特性进行分析，一般主要用来进行<strong>数据降维</strong>和<strong>聚类</strong>。<br>&emsp;&emsp;分类问题主要是用在预测变量是离散情况的问题上，而预测问题主要是针对预测变量是连续情况的问题。<br>&emsp;&emsp;数据降维主要是对事物的特性进行筛选和压缩。比如处理图片时候，直接利用图像的像素求解问题，那么数据的维度会非常高，因此可以采用数据降维技术对图像进行降维处理，利用最具有区分度的像素对图像进行重组，达到避免维数灾难的效果。<br>&emsp;&emsp;聚类则是依据数据的相似性对数据样本划分成不同的<strong>簇</strong>。聚类问题不同于分类问题，分类问题中分类的个数和每个分类的含义都是确定的，而聚类问题中簇的个数和每个簇的具体含义是未知的。</p>
<h2 id="1-2-经验"><a href="#1-2-经验" class="headerlink" title="1.2 经验"></a>1.2 经验</h2><p>&emsp;&emsp;一般把数据看做经验，实际中是对机器学习任务有用的信息才会被看做是经验。通常把反应数据内在规律的信息称作为<strong>特征</strong>。<br>&emsp;&emsp;监督学习问题中，经验主要包括<strong>特征</strong>和<strong>标签</strong>两部分。正常情况下，使用一个特征向量和一个标签来表示一个数据样本。<br>&emsp;&emsp;无监督学习问题中，并没有标签，因此无法进行预测。但是无监督学习对数据结构分析却更胜一筹。在生活中，一般获取的数据都是无标签数据，对数据进行打标签会花费大量的时间、人力等。</p>
<h2 id="1-3-性能"><a href="#1-3-性能" class="headerlink" title="1.3 性能"></a>1.3 性能</h2><p>&emsp;&emsp;所谓性能，是指学习任务完成质量的评价指标。一般流程是：准备测试样本，使用相同的特征提取方法进行特征提取，然后通过训练好的模型进行预测，对比预测结果和测试样本本身的标签。一般情况下测试样本不用于模型的训练。如果没有单独的测试样本，通常的做法是在原始数据中随机选取3/4作为训练样本，剩余的1/4作为预测样本。通过测试样本正确预测的个数进行准确率的计算。<br>&emsp;&emsp;对于回归问题，通常是将预测值和实际值之间的误差大小作为性能评价指标。<br>&emsp;&emsp;具体的机器学习算法评价指标请参见<a href="https://njuferret.github.io/2017/08/29/machinelearning_roc_pr/" target="_blank" rel="external">这里</a>。</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 三要素 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Logistic函数]]></title>
      <url>/2017/09/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Logistic%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="1、Logistic函数推导"><a href="#1、Logistic函数推导" class="headerlink" title="1、Logistic函数推导"></a>1、Logistic函数推导</h1><a id="more"></a>
<p>&emsp;&emsp;Logistic回归模型中，因变量只有0和1两种情况。假设在$p$个独立自变量${x}_{1}$,${x}_{2}$,…,${x}_{p}$,的作用下，记$y$取1的概率是$p=P(y=1|X)$，则取0的概率是$1-p$。那么取1和取0的概率之比为$\frac{p}{1-p}$，该比值称为<strong>发生比</strong>（odds）。两个不同时间的发生比之比称为<strong>优势比</strong>，$\frac{p1}{1-p1}/\frac{p2}{1-p2}$。Logistic一般用发生比odds进行解释。<br>&emsp;&emsp;对发生比取自然对数即为$$Logit(p)=ln(\frac{p}{1-p})$$<br>&emsp;&emsp;令$Logit(p)=Z$，通过化简即可得到$p=\frac{1}{1+e^{-z}}$。$p=\frac{1}{1+e^{-z}}$就是Logistic函数。<br>&emsp;&emsp;因为$p$在$(0,1)$取值，则$Logit(p)$在$(0,+\propto)$取值，Logistic函数在$(-\propto,+\propto)$取值。</p>
<h1 id="2、Logistic回归模型"><a href="#2、Logistic回归模型" class="headerlink" title="2、Logistic回归模型"></a>2、Logistic回归模型</h1><p>&emsp;&emsp;Logistic回归模型是建立在$ln(\frac{p}{1-p})$与自然变量的线性回归模型。Logistic回归模型的公式为：$$ln(\frac{p}{1-p})={\beta}_{0}+{\beta}_{1}{x}_{1}+…+{\beta}_{p}{x}_{p}+\varepsilon $$<br>&emsp;&emsp;因为$ln(\frac{p}{1-p})$的取值是$(-\propto,+\propto)$,所以自然变量${x}_{1}$,${x}_{2}$,…,${x}_{p}$的取值是任意范围的。<br>&emsp;&emsp;记$g(x)={\beta}_{0}+{\beta}_{1}{x}_{1}+…+{\beta}_{p}{x}_{p}$，得到$p=\frac{1}{1+e^{-g(x)}}$，$1-p=\frac{1}{1+e^{g(x)}}$。<strong>此处忽略$\varepsilon$</strong>。</p>
<h1 id="3、Logistic回归模型的建模步骤"><a href="#3、Logistic回归模型的建模步骤" class="headerlink" title="3、Logistic回归模型的建模步骤"></a>3、Logistic回归模型的建模步骤</h1><ol>
<li>根据目标数据设置指标变量(因变量、自变量)，然后收集数据。</li>
<li>用$ln(\frac{p}{1-p})$和自变量列出回归方程，估计出模型中的回归系数。$$ln(\frac{p}{1-p})={\beta}_{0}+{\beta}_{1}{x}_{1}+…+{\beta}_{p}{x}_{p} $$</li>
<li>进行模型检验，根据输出的方差分析表中的$F$值和$p$值来检验该回归方程是否显著。如果$p$值小于显著水平$\alpha$则模型通过检验，可以进行下一步回归系数的检验，否则重新选择指标变量，重新建立回归方程。</li>
<li>在多元线性回归中，并不是每个自变量都会对$y$产生显著的影响，需要对每一个自变量都进行显著性检验，使得那些次要可有可无的变量不参与回归过程，去除之后便可建立更加简单有效的回归方程。</li>
<li>模型应用。</li>
</ol>
<h1 id="4、对一般Logistic模型系数的解释"><a href="#4、对一般Logistic模型系数的解释" class="headerlink" title="4、对一般Logistic模型系数的解释"></a>4、对一般Logistic模型系数的解释</h1><p><br></p>
<blockquote>
<p>该部分引用<a href="http://www.jianshu.com/p/89c6e5ebea34?winzoom=1" target="_blank" rel="external">这里</a></p>
</blockquote>
<p>&emsp;&emsp;广义的线性模型由三部分组成：随机部分、系统部分和连接部分。直观地理解这种差异：将两种模型都视为广义线性模型的特殊形式。广义线性模型由三个部分组成：随机部分、系统部分和连接部分。</p>
<p>&emsp;&emsp;随机部分指的是变量Y以及Y的概率分布，传统线性模型Y是连续变量并假设其服从正态分布。在经典logistic回归中，Y是一个二分变量并服从二项式分布。</p>
<p>&emsp;&emsp;系统部分指的是解释变量以及这些解释变量如何组合在一起构成了解释方程，在传统线性模型和logistic回归中都是这样：${\beta}_{0}+{\beta}_{1}{x}_{1}+…+{\beta}_{p}{x}_{p}$ ，这个表达通常被称为线性预测（linear predictor），而x与其他解释变量还可以结合（如相乘交互），因此可以做出其实非线性的预测。</p>
<p>&emsp;&emsp;连接部分说明了Y的均值 μ =E（Y）如何与线性预测相联系。</p>
<blockquote>
<p>其实说白了就是，随机部分规定了 Y，系统部分规定了 X，而连接部分就是用一个连接函数（link function）将 X 与 Y连了起来，也就是我们经常看到的回归方程，它所反映的是 x 的变化带来的 Y 的均值的变化。</p>
</blockquote>
<p>&emsp;&emsp;对Logit模型系数解释的一个总的原则是：方向看系数，大小看exp(系数)，不管自变量是连续变量还是虚拟变量 or 其他。</p>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Logistic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于RK3188平台与Android5.1的AP6212蓝牙与wifi调试记录]]></title>
      <url>/2017/08/30/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E5%9F%BA%E4%BA%8ERK3188%E5%B9%B3%E5%8F%B0%E4%B8%8EAndroid5.1%E7%9A%84AP6212%E8%93%9D%E7%89%99%E4%B8%8Ewifi%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;最近调试了一款基于RK3188与Android5.1的板子，蓝牙和wifi的芯片采用的是AP6212，AP6212文档在<a href="相关文档\AP6212_V1.1_09022014.pdf"><strong>这里</strong></a>。存在的问题是Wifi和蓝牙都不能扫描设备。<br><a id="more"></a></p>
<h3 id="1-AP6212管脚图"><a href="#1-AP6212管脚图" class="headerlink" title="1. AP6212管脚图"></a>1. AP6212管脚图</h3><div align="center"><br>    <img src="/2017/08/30/嵌入式/基于RK3188平台与Android5.1的AP6212蓝牙与wifi调试记录/AP6212管脚.jpg" alt="AP6212管脚.jpg"><br></div>

<p>&emsp;&emsp;管脚10和管脚11是26M晶振的IN和OUT，要求26M晶振的频偏是10ppm。24管脚是32.768KHz晶振的输入脚，如果管脚22（VDD）的幅度为1.8v，则要求24管脚的幅度是1.7v-1.8v，如果管脚22（VDD）的幅度为3.3v，则要求24管脚的幅度是3v-3.3v。通过调整管脚22之前的分压电阻来调整幅度满足要求。通过以上操作可以使得wifi搜的信号，并能连接网络。如果wifi不能工作尝试换一下其他26M晶振。</p>
<h3 id="2-更新蓝牙固件"><a href="#2-更新蓝牙固件" class="headerlink" title="2. 更新蓝牙固件"></a>2. 更新蓝牙固件</h3><p>&emsp;&emsp;经过如上操作，可以使得wifi正常工作，并且蓝牙也能扫描出附近的蓝牙设备，并且能和蓝牙2.0配对，但是不能连接BLE。问题解决办法：联系AP6212的供应商，提供新的AP6212蓝牙固件。对Android5.1系统进行蓝牙固件更新。</p>
<h4 id="2-1-固件更新方法"><a href="#2-1-固件更新方法" class="headerlink" title="2.1 固件更新方法"></a>2.1 固件更新方法</h4><ol>
<li>安装adb调试工具，配置adb.exe的环境变量</li>
<li>将Android5设备与电脑连接</li>
<li>通过<code>adb root</code>获得root权限，执行<code>adb remount</code></li>
<li>push更新固件<code>adb push bcm43438a0.hcd /vendor/firmware/bcm43438a0.hcd</code></li>
<li>重新启动安卓设备，测试蓝牙连接<br><strong>固件位置要查看android源码进行查找，可以通过<code>locate bt_vendor.conf</code>对配置文件进行定位，比如<code>FwPatchFilePath = /vendor/firmware/</code></strong></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 嵌入式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RK3188 </tag>
            
            <tag> Wifi </tag>
            
            <tag> 蓝牙 </tag>
            
            <tag> Android5.1 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据质量分析]]></title>
      <url>/2017/08/30/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>&emsp;&emsp;数据质量分析主要是分析数据源是否含有脏数据。所谓的脏数据是指不符合要求的数据，不能对其进行相应的分析。主要的脏数据有：<br> <a id="more"></a></p>
<ol>
<li>缺失值</li>
<li>异常值</li>
<li>不一致的值</li>
<li>重复数据或者含有特殊符号的数据</li>
</ol>
<h2 id="2-缺失值分析"><a href="#2-缺失值分析" class="headerlink" title="2. 缺失值分析"></a>2. 缺失值分析</h2><p>&emsp;&emsp;缺失值主要包括记录缺失和记录中某项字段信息缺失。使用简单的统计就可以得到含有缺失值的属性个数，以及每个字段的未缺失数、缺失数以及缺失率等。一般情况处理缺失值主要有三种方法：</p>
<ol>
<li>直接将含有缺失值的记录删除</li>
<li>对缺失值进行插值补充</li>
<li>不处理缺失值</li>
</ol>
<p>缺失值产生的影响<br>&emsp;<em>1. 数据分析时将会丢失大量的有用信息。</em><br>&emsp;<em>2. 数据分析模型更难把握数据中蕴含的规律。</em><br>&emsp;<em>3. 可能会使模型建模陷入混乱，导致错误的输出。</em></p>
<h2 id="3-异常值分析"><a href="#3-异常值分析" class="headerlink" title="3. 异常值分析"></a>3. 异常值分析</h2><p>&emsp;&emsp;异常值检测是检验数据是否录入错误以及是否含有不合常理的值。异常值是属于个别值，其数值明显偏离其余观测值。因此异常值也成为离群点。一般情况下处理异常值主要有三种方法：</p>
<h3 id="3-1-简单的统计分析"><a href="#3-1-简单的统计分析" class="headerlink" title="3.1 简单的统计分析"></a>3.1 简单的统计分析</h3><p>&emsp;最常用的统计量就是最大值和最小值。通过最大值和最小值对数据进行判断是否超出了合理的范围。</p>
<h3 id="3-2-3-sigma-原则"><a href="#3-2-3-sigma-原则" class="headerlink" title="3.2 $3\sigma$原则"></a>3.2 $3\sigma$原则</h3><p>&emsp;如果数据服从正态分布，在$3\sigma$原则下，异常值被定义为一组测定值与平均值偏差超过三倍标准差值。$P(|x-\mu|&gt;3\sigma)\leq0.003$属于极个别的小概率事件。</p>
<h3 id="3-3-盒形图分析"><a href="#3-3-盒形图分析" class="headerlink" title="3.3 盒形图分析"></a>3.3 盒形图分析</h3><p>&emsp;盒形图也称箱形图，提供了识别异常值的一个标准：小于${Q}_{L}-1.5QR$和大于${Q}_{U}-1.5QR$的数据均被认为是异常值，其中$ {Q}_{L}$是下四分位，${Q}_{U}$是上四分位，$ QR={Q}_{U}-{Q}_{L}$。<br>&emsp;四分位数具有一定的鲁棒性，用盒形图分析异常数据的结果比较客观。</p>
<h2 id="4-一致性分析"><a href="#4-一致性分析" class="headerlink" title="4. 一致性分析"></a>4. 一致性分析</h2><p>&emsp;&emsp;不一致是指数据的矛盾性、不相容性。出现这种情况主要是因为待分析的数据来源于不同的数据源或者相同的重复数据没有同步更新，比如数据源中有两张表同时含有用户姓名，更新姓名时候只更新一张表没有更新第二张表则会出现数据不一致性导致数据矛盾不相容。</p>
]]></content>
      
        <categories>
            
            <category> 数据分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
